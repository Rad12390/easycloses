<?php

namespace LocalsBest\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    public function findProductForUser($user, $slug)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->join('p.users', 'u')
            ->where('p.slug = :slug')
            ->andWhere('u.id = :userId')
            ->setParameter('userId', $user->getId())
            ->setParameter('slug', $slug);

        return $qb->getQuery()->getArrayResult();
    }

    public function getAll($user, $currentPage = 1, $options)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->addSelect('AVG(f.rating) as averageRating, t')
            ->where('p.is_able_for_shop = :shopStatus')
            ->innerJoin('p.types', 't')
//            ->where('p.created_by = 1')
            ->leftJoin('p.feedbacks', 'f')
            ->groupBy('p,t')
            ->setParameter('shopStatus', true)
        ;

        if ($user !== null) {

            $business = $user->getBusinesses()[0];

            $qb
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->like(
                            'p.forRoles',
                            $qb->expr()->literal("%".$user->getRole()->getRole()."%")
                        ),
                        'p.forRoles = :emptyArray',
                        'p.forRoles is null'
                    )
                )
                ->leftJoin('p.forBusiness', 'b')
                ->andWhere(
                    $qb->expr()->orX(
                        'b.id is null',
                        'b.id = :businessId'
                    )
                )
                ->setParameter('businessId', $business->getId())
                ->setParameter('emptyArray', 'a:0:{}')
            ;
        }

        if($options['category'] !== null) {
            $qb
                ->join('p.categories', 'c', 'WITH', 'c.id = :category')
                ->setParameter('category', $options['category'])
            ;
        }

        switch ($options['order_by']){
            case 'name':
                $qb->orderBy('p.title', $options['order_dir']);
                break;
            case 'price':
                $qb->orderBy('p.price', $options['order_dir']);
                break;
            case 'date':
                $qb->orderBy('p.createdAt', $options['order_dir']);
                break;
            case 'rating':
                $qb->orderBy('averageRating', $options['order_dir']);
                break;
            case 'popularity':
                $qb->orderBy('p.views', $options['order_dir']);
                break;
        }

        // No need to manually get get the result ($query->getResult())

        $paginator = $this->paginate($qb, $currentPage);

        return $paginator;
    }

    /**
     * Paginator Helper
     *
     * Pass through a query object, current page & limit
     * the offset is calculated from the page and limit
     * returns an `Paginator` instance, which you can call the following on:
     *
     *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
     *     $paginator->count() # Count of ALL posts (ie: `20` posts)
     *     $paginator->getIterator() # ArrayIterator
     *
     * @param \Doctrine\ORM\Query $dql   DQL Query Object
     * @param integer            $page  Current page (defaults to 1)
     * @param integer            $limit The total number per page (defaults to 5)
     *
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function paginate($dql, $page = 1, $limit = 5)
    {
        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1)) // Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }

    public function getOneBySlug($slug)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->addSelect('AVG(f.rating) as averageRating')
            ->where('p.slug = :slug')
            ->andWhere('p.is_able_for_shop = :shopStatus')
            ->setParameter('slug', $slug)
            ->setParameter('shopStatus', true)
            ->leftJoin('p.feedbacks', 'f')
            ->groupBy('p')
        ;

        try {
            return $qb->getQuery()->getSingleResult();
        }
        catch(NoResultException $e) {
            return null;
        }
    }

    public function getProductsForCart($ids)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->addSelect('i')
            ->where('p.id in (:ids)')
            ->andWhere('p.is_able_for_shop = :shopStatus')
            ->leftJoin('p.images', 'i')
            ->setParameter('ids', $ids)
            ->setParameter('shopStatus', true)
        ;

        return $qb->getQuery()->getArrayResult();
    }

    public function getPopular($limit = 5)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->where('p.is_able_for_shop = :shopStatus')
            ->setParameter('shopStatus', true)
            ->innerJoin('p.types', 't')
            ->orderBy('p.views', 'DESC')
            ->setMaxResults($limit)
        ;

        return $qb->getQuery()->getResult();
    }

    public function getByRecentReviews($limit = 5)
    {
        $query = $this->getEntityManager()->createQuery(
            'SELECT p, f, i
             FROM LocalsBestUserBundle:Feedback as f
             JOIN f.product as p
             LEFT JOIN p.images as i
             ORDER BY i.orderNumber ASC, f.createdAt DESC'
        )->setMaxResults($limit);

        return $query->getArrayResult();
    }

    public function getRelated(Product $product,$limit = 3)
    {
        $qb = $this->createQueryBuilder('p');

        $categories = [];

        foreach ($product->getCategories() as $item) {
            $categories[] = $item->getId();
        }

        $qb
            ->addSelect('AVG(f.rating) as averageRating, RAND() as HIDDEN rand')
            ->innerJoin('p.types', 't')
            ->leftJoin('p.categories', 'c')
            ->leftJoin('p.feedbacks', 'f')
            ->groupBy('p')
            ->andWhere('p.id <> :id')
            ->andWhere(
                $qb->expr()->in(
                    'c.id',
                    $categories
                )
            )
            ->orderBy('rand')
            ->setMaxResults($limit)
            ->setParameter('id', $product->getId())
        ;

        return $qb->getQuery()->getResult();
    }

    public function forShop(User $user)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->addSelect('t')
            ->innerJoin('p.types', 't')
            ->where('p.created_by = :user')
            ->andWhere('p.is_able_for_shop = :shopStatus')
            ->orderBy('p.title', 'ASC')
            ->setParameter('user', $user)
            ->setParameter('shopStatus', true);

        return $qb->getQuery()->getArrayResult();
    }

    public function checkAddon($addon, $business)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->innerJoin('p.types', 'pt')
            ->innerJoin('pt.productModules', 'pm')
            ->innerJoin('pm.businesses', 'b')
            ->where('b.id = :businessId')
            ->andWhere('p.addon_part = :addon')
            ->setMaxResults(1)
            ->setParameter('businessId', $business->getId())
            ->setParameter('addon', $addon)
        ;

        $result = $qb->getQuery()->getResult();

        if(count($result) > 0) {
            return $result[0];
        }

        return false;
    }
}

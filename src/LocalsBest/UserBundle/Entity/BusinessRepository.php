<?php

namespace LocalsBest\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BusinessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessRepository extends EntityRepository
{
    public function save(Business $business)
    {
        foreach ($business->getAboutMe() as $aboutMe) {
            $aboutMe->setBusiness($business);

            $this->getEntityManager()->persist($aboutMe);
        }

        $this->getEntityManager()->persist($business);

        $this->getEntityManager()->flush();
    }

    public function getCompanyAgents()
    {

    }

    public function findBusinessesForDirectory()
    {
        $qb = $this->createQueryBuilder('b');

        $qb->join('b.types', 't')
            ->orderBy('t.name', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function findVendorsBusinesses()
    {
        $qb = $this->createQueryBuilder('b');

        $qb->join('b.types', 't')
            ->where('t.id <> :typeId')
            ->orderBy('b.bio_clicks', 'DESC')
            ->setParameter('typeId', 23);

        return $qb->getQuery()->getResult();
    }

    public function getStates()
    {
        $qb = $this->createQueryBuilder('b');

        $qb->select('s.id, s.name')
            ->join('b.types', 't')
            ->join('b.address', 'a')
            ->join('LocalsBestUserBundle:State', 's', 'WITH', 's.short_name = a.state')
            ->where('b.plan is not null')
//            ->andWhere('t.id = :typeId')
            ->orderBy('s.name', 'ASC')
            ->distinct();
//            ->setParameter('typeId', 23);

        return $qb->getQuery()->getResult();
    }

    public function getBusinessByState(State $state)
    {
        $qb = $this->createQueryBuilder('b');

        $qb->select('b')
            ->join('b.types', 't')
            ->join('b.address', 'a')
            ->where('b.plan is not null')
//            ->andWhere('t.id = :typeId')
            ->andWhere('a.state = :state')
            ->orderBy('b.name', 'ASC')
            ->distinct()
//            ->setParameter('typeId', 23)
            ->setParameter('state', $state->getShortName());

        return $qb->getQuery()->getResult();
    }

    public function getStatesArray()
    {
        $qb = $this->createQueryBuilder('b');
        $qb->select('s')
            ->join('b.types', 't')
            ->join('b.address', 'a')
            ->join('LocalsBestUserBundle:State', 's', 'WITH', 's.short_name = a.state')
            ->orderBy('s.name', 'ASC')
            ->distinct();
        return $qb->getQuery()->getArrayResult();
    }

    public function getWorkingStatesArray()
    {
        $qb = $this->createQueryBuilder('b');
        $qb->select('w_s.id, w_s.name, w_s.short_name')
            ->join('b.workingStates', 'w_s')
            ->orderBy('w_s.short_name', 'ASC')
            ->distinct();
        return $qb->getQuery()->getArrayResult();
    }

    public function getBusinessesByInfo($filters)
    {
        $qb = $this->createQueryBuilder('b');
        $qb
            ->addSelect('c, e, p, o.id as ownerId')
            ->leftJoin('b.address', 'a')
            ->leftJoin('b.types', 't')
            ->leftJoin('b.contact', 'c')
            ->leftJoin('c.emails', 'e')
            ->leftJoin('c.phones', 'p')
            ->leftJoin('b.staffs', 'u')
            ->leftJoin('b.owner', 'o')
            ->leftJoin('u.workingCities', 'w_c')
            ->leftJoin('b.workingStates', 'w_s')
            ->where('b.searchHidden = :hiddenStatus')
            ->setParameter('hiddenStatus', false)
        ;

        if($filters['state'] != '') {
            $qb
                ->andWhere(
                    $qb->expr()->orX(
                        'a.state = :state',
                        'w_s.short_name = :state'
                    )
                )
                ->setParameter('state', $filters['state'])
            ;
        }
        if($filters['city'] != '') {
            $qb
                ->andWhere('w_c.id = :city')
                ->setParameter('city', $filters['city'])
            ;
        }
        if($filters['type'] != '') {
            $qb
                ->andWhere('t.id = :typeId')
                ->setParameter('typeId', $filters['type'])
            ;
        }
        if($filters['business'] != '' && strlen($filters['business']) >= 3) {
            $qb
                ->andWhere('b.name LIKE :business')
                ->setParameter('business', '%' . $filters['business'] . '%')
            ;
        }

        return $qb->getQuery()->getArrayResult();
    }

    public function getBusinessesArray()
    {
        $qb = $this->createQueryBuilder('b');

        $qb
            ->leftJoin('b.owner', 'u')
            ->where('b.deleted IS NULL')
            ->andWhere('u.deleted IS NULL')
            ->orderBy('b.name', 'ASC')
            ->distinct();

        return $qb->getQuery()->getArrayResult();
    }

    public function getCharities()
    {
        $qb = $this->createQueryBuilder('b');

        $qb
            ->leftJoin('b.types', 't')
            ->where('b.deleted IS NULL')
            ->andWhere('t.name = :charity')
            ->orderBy('b.name', 'ASC')
            ->setParameter('charity', 'Charity')
            ->distinct();

        return $qb;
    }
    
    public function getManagerCharities()
    {
        $qb = $this->createQueryBuilder('b');

        $qb
            ->leftJoin('b.types', 't')
            ->where('b.deleted IS NULL')
            ->andWhere('t.name = :charity')
            ->orderBy('b.name', 'ASC')
            ->setParameter('charity', 'Charity')
            ->distinct();

        return $qb;
    }
}

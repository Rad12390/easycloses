<?php

namespace LocalsBest\CommonBundle\Entity;

use LocalsBest\CommonBundle\ORM\EntityRepository;

/**
 * NoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteRepository extends EntityRepository
{
    public function findMyObjects($me, $myStaffs = array())
    {
        $qb = $this->createQueryBuilder('n');
        
        $qb ->where('n.createdBy = :createdBy')
            ->leftJoin('n.shares', 's')
            ->orWhere('s.user = :createdBy')
            ->orWhere('s.user IN (:user)')
            ->orWhere('s.createdBy      = :createdBy')
            ->setParameter('createdBy', $me)
            ->setParameter('user', $myStaffs)
            ->orderBy('n.updated', 'DESC');
            
        return $qb->getQuery()->getResult();
    }
    
    public function findMyNotes($me, $object, $objectId, $myStaffs = array())
    {
        $allNotes = array();
        $allNoteIds = array();
        
        $qb = $this->createQueryBuilder('n');
        $qb->where('n.createdBy      = :createdBy')
            ->andWhere('n.objectType = :object')
            ->andWhere('n.objectId   = :objectId')
            ->addOrderBy('n.important', 'DESC')
            ->addOrderBy('n.created', 'DESC')
            ->setParameter('object', $object)
            ->setParameter('objectId', $objectId->getId())
            ->setParameter('createdBy', $me);
        $totalMyCreateNotes = $qb->getQuery()->getArrayResult();
        
        if($totalMyCreateNotes) {
            foreach ($totalMyCreateNotes as $note) {
                $allNoteIds[] = $note['id'];
            }
        }

        if($me !== $objectId) {
            $qb = $this->createQueryBuilder('n');
            $qb->leftJoin('n.shares', 's')
                ->andWhere('n.objectType = :object')
                ->andWhere('n.objectId   = :objectId')
                ->andWhere('s.user       = :sharedBy')
                ->addOrderBy('n.important', 'DESC')
                ->addOrderBy('n.created', 'DESC')
                ->setParameter('object', $object)
                ->setParameter('sharedBy', $me)
                ->setParameter('objectId', $objectId->getId());

            $totalMyShareNotes = $qb->getQuery()->getArrayResult();

            if($totalMyShareNotes) {
                foreach ($totalMyShareNotes as $note) {
                    $allNoteIds[] = $note['id'];
                }
            }

            $qb = $this->createQueryBuilder('n');
            $qb->leftJoin('n.shares', 's')
                ->where('n.createdBy      = :createdBy')
                ->andWhere('n.objectType = :object')
                ->andWhere('n.objectId   = :objectId')
                ->andWhere('s.user       = :sharedBy')
                ->addOrderBy('n.important', 'DESC')
                ->addOrderBy('n.created', 'DESC')
                ->setParameter('object', $object)
                ->setParameter('sharedBy', $me)
                ->setParameter('objectId', $me->getId())
                ->setParameter('createdBy', $objectId);

            $totalMyUserShareNotes = $qb->getQuery()->getArrayResult();

            if($totalMyUserShareNotes) {
                foreach ($totalMyUserShareNotes as $note) {
                    $allNoteIds[] = $note['id'];
                }
            }

            $qb = $this->createQueryBuilder('n');
            $qb->leftJoin('n.shares', 's')
                ->andWhere('n.objectType = :object')
                ->andWhere('n.objectId   = :objectId')
                ->andWhere('s.createdBy  = :sharedBy')
                ->addOrderBy('n.important', 'DESC')
                ->addOrderBy('n.created', 'DESC')
                ->setParameter('object', $object)
                ->setParameter('sharedBy', $me)
                ->setParameter('objectId', $objectId->getId());

            $totalShareNotes = $qb->getQuery()->getArrayResult();

            if($totalShareNotes) {
                foreach ($totalShareNotes as $note) {
                    $allNoteIds[] = $note['id'];
                }
            }
        }

        if($allNoteIds !== null) {
            $allNoteIds = array_unique($allNoteIds);

            $allNotes = $this->findBy(
                ['id' => $allNoteIds],
                [
                    'important' => 'DESC',
                    'created' => 'DESC',
                ]
            );
        }

//        usort($allNotes, function($a, $b)
//            {
//                if ($a->getImportant() == 1 && $b->getImportant() == 1) {
//                    return strcmp($b->getCreated(), $a->getCreated());
//                }
//                if ($a->getImportant() == 1) { return -1; }
//                if ($b->getImportant() == 1) { return 1; }
//                return strcmp($b->getCreated(), $a->getCreated());
//            });

        return $allNotes;
    }

    public function findNotesForAdmin($me, $object, $objectId, $myStaffs = array())
    {
        $allNotes = array();
        $allNoteIds = array();

        $qb = $this->createQueryBuilder('n');
        $qb->where('n.objectType = :object')
            ->andWhere('n.objectId   = :objectId')
            ->addOrderBy('n.important', 'DESC')
            ->addOrderBy('n.created', 'DESC')
            ->setParameter('object', $object)
            ->setParameter('objectId', $objectId->getId());

        $totalMyCreateNotes = $qb->getQuery()->getArrayResult();

        if($totalMyCreateNotes) {
            foreach ($totalMyCreateNotes as $note) {
                $allNoteIds[] = $note['id'];
            }
        }

        if($me !== $objectId) {
            $qb = $this->createQueryBuilder('n');
            $qb->leftJoin('n.shares', 's')
                ->andWhere('n.objectType = :object')
                ->andWhere('n.objectId   = :objectId')
                ->andWhere('s.user       = :sharedBy')
                ->addOrderBy('n.important', 'DESC')
                ->addOrderBy('n.created', 'DESC')
                ->setParameter('object', $object)
                ->setParameter('sharedBy', $me)
                ->setParameter('objectId', $objectId->getId());

            $totalMyShareNotes = $qb->getQuery()->getArrayResult();

            if($totalMyShareNotes) {
                foreach ($totalMyShareNotes as $note) {
                    $allNoteIds[] = $note['id'];
                }
            }

            $qb = $this->createQueryBuilder('n');
            $qb->leftJoin('n.shares', 's')
                ->where('n.createdBy      = :createdBy')
                ->andWhere('n.objectType = :object')
                ->andWhere('n.objectId   = :objectId')
                ->andWhere('s.user       = :sharedBy')
                ->addOrderBy('n.important', 'DESC')
                ->addOrderBy('n.created', 'DESC')
                ->setParameter('object', $object)
                ->setParameter('sharedBy', $me)
                ->setParameter('objectId', $me->getId())
                ->setParameter('createdBy', $objectId);

            $totalMyUserShareNotes = $qb->getQuery()->getArrayResult();

            if($totalMyUserShareNotes) {
                foreach ($totalMyUserShareNotes as $note) {
                    $allNoteIds[] = $note['id'];
                }
            }

            $qb = $this->createQueryBuilder('n');
            $qb->leftJoin('n.shares', 's')
                ->andWhere('n.objectType = :object')
                ->andWhere('n.objectId   = :objectId')
                ->andWhere('s.createdBy  = :sharedBy')
                ->addOrderBy('n.important', 'DESC')
                ->addOrderBy('n.created', 'DESC')
                ->setParameter('object', $object)
                ->setParameter('sharedBy', $me)
                ->setParameter('objectId', $objectId->getId());

            $totalShareNotes = $qb->getQuery()->getArrayResult();

            if($totalShareNotes) {
                foreach ($totalShareNotes as $note) {
                    $allNoteIds[] = $note['id'];
                }
            }
        }

        if($allNoteIds !== null) {
            $allNoteIds = array_unique($allNoteIds);

            $allNotes = $this->findBy(
                ['id' => $allNoteIds],
                [
                    'important' => 'DESC',
                    'created' => 'DESC',
                ]
            );
        }

        return $allNotes;
    }

    public function findNotesForMainPage($user, $type = 'all', $offset = null, $count = null)
    {

        $qb = $this->createQueryBuilder('n')
            ->leftJoin('n.shares', 's')
            ->andWhere('s.isVisible = 1 OR s.isVisible is null')
            ->andWhere('s.user = :forUser')
            ->andWhere('s.createdBy <> :forUser')
            ->addOrderBy('n.important', 'DESC')
            ->addOrderBy('n.created', 'DESC')
            ->setParameter('forUser', $user);
        
            $qb->andWhere('n.objectType = :type')
                ->setParameter('type', 'LocalsBestUserBundle:' . ucfirst($type));

        if(!is_null($offset) && !is_null($count)) {
            $qb->setFirstResult($offset)
                ->setMaxResults($count);
        }

        $notes = $qb->getQuery()->getResult();
        return $notes;
    }

    public function findNotesForContactOrUser($object, $objectId)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->where('n.objectType = :object')
            ->andWhere('n.objectId   = :objectId')
            ->addOrderBy('n.important', 'DESC')
            ->addOrderBy('n.created', 'DESC')
            ->setParameter('object', $object)
            ->setParameter('objectId', $objectId->getId());

        return $qb->getQuery()->getResult();
    }
}

<?php

namespace LocalsBest\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\QueryBuilder;
use LocalsBest\UserBundle\Entity\Business;
use LocalsBest\UserBundle\Entity\User;

/**
 * SkuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkuRepository extends EntityRepository
{
    private function addRestrictions(QueryBuilder $qb, $type = 'view', $params)
    {
        
        /** @var User $user */
        $user = $params['user'];
        /** @var Business $business */
        $business = $params['business'];
       
        $qb
            ->leftJoin('s.restrictions', 'r', 'WITH', 'r.type = :rType')
            ->leftJoin('r.roles', 'r_r')
            ->leftJoin('r.industries', 'r_i')
            ->leftJoin('r.states', 'r_s')
            ->leftJoin('r.cities', 'r_c')
            ->leftJoin('r.businesses', 'r_b')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->andX(
                        $qb->expr()->isNull('r.rolesSwitch'),
                        $qb->expr()->eq('r_r.id', ':restrictRoleId')
                    ),
                    $qb->expr()->orX(
                        $qb->expr()->eq('r.industriesSwitch',':empty'),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.industriesSwitch', ':enableStatus'),
                            $qb->expr()->in('r_i.id', ':restrictIndustryIds')
                        ),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.industriesSwitch', ':disableStatus'),
                            $qb->expr()->notIn('r_i.id', ':restrictIndustryIds')
                        )
                    ),
//                    $qb->expr()->orX(
//                        $qb->expr()->isNull('r.statesSwitch'),
//                        $qb->expr()->andX(
//                            $qb->expr()->eq('r.statesSwitch', ':enableStatus'),
//                            $qb->expr()->in('r_s.id', ':restrictStateIds')
//                        ),
//                        $qb->expr()->andX(
//                            $qb->expr()->eq('r.statesSwitch', ':disableStatus'),
//                            $qb->expr()->notIn('r_s.id', ':restrictStateIds')
//                        )
//                    ),
                    $qb->expr()->orX(
                        //$qb->expr()->eq('r.citiesSwitch', ':empty'),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.citiesSwitch', ':empty'),
                            $qb->expr()->isNull('r_s.id')
                        ),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.citiesSwitch', ':empty'),
                            $qb->expr()->in('r_s.id', ':restrictStateIds')
                        ),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.citiesSwitch', ':enableStatus'),
                            $qb->expr()->in('r_c.id', ':restrictCityIds')
                        ),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.citiesSwitch', ':disableStatus'),
                            $qb->expr()->notIn('r_c.id', ':restrictCityIds')
                        )
                    ),
                    $qb->expr()->orX(
                        $qb->expr()->eq('r.businessesSwitch',':empty'),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.businessesSwitch', ':enableStatus'),
                            $qb->expr()->in('r_b.id', ':restrictBusinessId')
                        ),
                        $qb->expr()->andX(
                            $qb->expr()->eq('r.businessesSwitch', ':disableStatus'),
                            $qb->expr()->notIn('r_b.id', ':restrictBusinessId')
                        )
                    )
//                    $qb->expr()->orX(
//                        $qb->expr()->neq('p.quantity',':notenough')
//                    )
                )
            )
            ->setParameter('restrictRoleId', $user->getRole()->getId())
            ->setParameter('restrictIndustryIds', $business->getTypesIds())
            ->setParameter('enableStatus', 'enable')
            ->setParameter('disableStatus', 'disable')
            ->setParameter('restrictStateIds', $business->getWorkingStatesIds())
            ->setParameter('restrictCityIds', $user->getWorkingCitiesIds())
            ->setParameter('restrictBusinessId', $business)
            ->setParameter('empty', '')
            //->setParameter('notenough',0)
            ->setParameter('rType', $type)
        ;
        
        return $qb;
    }

    public function findAllBy($forApproveOnly=false, $params=[])
    {
       
        $qb = $this->createQueryBuilder('s');

        $qb->addSelect('IFNULL(c.createdAt, p.createdAt) as HIDDEN date, IFNULL(c.title, p.title) as HIDDEN title');

        if ($forApproveOnly === true) {
            $qb
                ->leftJoin('s.combo', 'c')
                ->leftJoin('s.package', 'p')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->andX(
                            'p.status = :ableStatus'
                        ),
                        $qb->expr()->andX(
                            'c.status = :ableStatus'
                        )
                    )
                )
                ->setParameter('ableStatus', Item::STATUS_PUBLISHED)
            ;
        } else {
            $qb
                ->where('s.isForSale = :forSaleStatus')
                ->setParameter('forSaleStatus', true)
            ;

            if (isset($params['category']) && $params['category'] !== null) {
                $qb
                    ->join('s.categories', 'cat', 'WITH', 'cat.id = :selectedCategory')
                    ->setParameter('selectedCategory', $params['category'])
                ;
            }
            
            $qb
                ->leftJoin('s.combo', 'c')
                ->leftJoin('s.package', 'p')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->andX(
                            'p.status = :ableStatus'
                        ),
                        $qb->expr()->andX(
                            'c.status = :ableStatus'
                        )
                    )
                )
                ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ;
            
            if($params['user']->getRole()->getId()!=1)
                $qb = $this->addRestrictions($qb, 'view', $params);
            
            $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);
            
            //$entities = $this->getEntityManager()->getRepository('LocalsBestShopBundle:Quotes')->findBy(['userid' => $params['user']]);
            $entities = $this->getEntityManager()->getRepository('LocalsBestShopBundle:Package')->findBy(['type' => 7 , 'assignee' => $params['user']]);
            
            foreach($entities as $entity){
                if($entity->getQuantity())
                    $result[]= $entity->getSku();
            }
            
            if (isset($params['business']) && $params['business'] !== null) {
                $business = $params['business'];
                $qb
                    ->andWhere(
                        $qb->expr()->notIn(
                            's.id',
                            $this->createQueryBuilder('disabledSkus')
                                ->select('disabledSkus.id')
                                ->innerJoin('disabledSkus.disableForBusinesses', 'b', 'WITH', 'b.id = :businessId')
                                ->getDQL()
                        )
                    )
                    ->setParameter('businessId', $business->getId())
                ;
            }
             
        }

        if (isset($params['orderBy']) && $params['orderBy'] !== null) {
            $qb->orderBy($params['orderBy'], $params['orderDir']);
        }
        
        $qb->groupBy('s.id');
        
        if (!empty($params['search'])) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like(
                        'p.title',
                        ':searchValue'
                    )
                )
            )
            ->setParameter('searchValue', '%' . $params['search'] . '%');
        }
        
        if(!empty($result) && !isset($params['category']) ){
            $array = $this->getOriginalArray($forApproveOnly=false, $params);
            
            if(array_key_exists("offset",$params) && $params['offset']==NULL){
                $params['offset']=0;
            }
            if(array_key_exists("limit",$params) && $params['limit']==NULL){
                $params['limit']=10;
            }
            $count=0;
            if(array_key_exists("offset",$params) && array_key_exists("limit",$params)){
                for($i=$params['offset'];$i<=($params['offset']+$params['limit']);$i++){
                    $count++;
                    if(array_key_exists($i,$array) && $count<=10)
                        $result1[]= $array[$i];
                }
                return $result1;
            }
            else{
                return $qb->getQuery()->getResult(); 
            }
            
        }
        else{
            if (isset($params['limit']) && isset($params['offset'])) {
            $qb
                ->setMaxResults($params['limit'])
                ->setFirstResult($params['offset'])
            ;
        }
            return $qb->getQuery()->getResult(); 
        }
        
        
    }
    
    
    public function getOriginalArray($forApproveOnly=false, $params=[])
    {
        
        $params['limit'] =10;
        $params['offset'] =0;
      
        $qb = $this->createQueryBuilder('s');

        $qb->addSelect('IFNULL(c.createdAt, p.createdAt) as HIDDEN date, IFNULL(c.title, p.title) as HIDDEN title');

        if ($forApproveOnly === true) {
            $qb
                ->leftJoin('s.combo', 'c')
                ->leftJoin('s.package', 'p')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->andX(
                            'p.status = :ableStatus'
                        ),
                        $qb->expr()->andX(
                            'c.status = :ableStatus'
                        )
                    )
                )
                ->setParameter('ableStatus', Item::STATUS_PUBLISHED)
            ;
        } else {
            $qb
                ->where('s.isForSale = :forSaleStatus')
                ->setParameter('forSaleStatus', true)
            ;

            if (isset($params['category']) && $params['category'] !== null) {
                $qb
                    ->join('s.categories', 'cat', 'WITH', 'cat.id = :selectedCategory')
                    ->setParameter('selectedCategory', $params['category'])
                ;
            }
            
            $qb
                ->leftJoin('s.combo', 'c')
                ->leftJoin('s.package', 'p')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->andX(
                            'p.status = :ableStatus'
                        ),
                        $qb->expr()->andX(
                            'c.status = :ableStatus'
                        )
                    )
                )
                ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ;
            
            if($params['user']->getRole()->getId()!=1)
                $qb = $this->addRestrictions($qb, 'view', $params);
            $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);
           
            //$entities = $this->getEntityManager()->getRepository('LocalsBestShopBundle:Quotes')->findBy(['userid' => $params['user']]);
            $entities = $this->getEntityManager()->getRepository('LocalsBestShopBundle:Package')->findBy(['type' => 7 , 'assignee' => $params['user']]);
            
            foreach($entities as $entity){
                if($entity->getQuantity())
                    $result[]= $entity->getSku();
            }
            
            if (isset($params['business']) && $params['business'] !== null) {
                $business = $params['business'];
                $qb
                    ->andWhere(
                        $qb->expr()->notIn(
                            's.id',
                            $this->createQueryBuilder('disabledSkus')
                                ->select('disabledSkus.id')
                                ->innerJoin('disabledSkus.disableForBusinesses', 'b', 'WITH', 'b.id = :businessId')
                                ->getDQL()
                        )
                    )
                    ->setParameter('businessId', $business->getId())
                ;
            }
             
        }

//        if (isset($params['orderBy']) && $params['orderBy'] !== null) {
//            $qb->orderBy($params['orderBy'], $params['orderDir']);
//        }
//        if (isset($params['limit']) && isset($params['offset'])) {
//            $qb
//                ->setMaxResults($params['limit'])
//                ->setFirstResult($params['offset'])
//            ;
//        }
        $qb->groupBy('s.id');
        
        
        if(!empty($result) && !isset($params['category']) ){
            $count= array_merge($result,$qb->getQuery()->getResult());
            
            for($i=$params['offset'];$i<$params['limit'];$i++){
                if(array_key_exists($i,$count))
                    $result1[]= $count[$i];
            }
            return $count;
        }
        else{
            return $qb->getQuery()->getResult(); 
        }
    }

    public function findAllForBusinessApprove(Business $business, User $user,$params)
    {
        $qb = $this->createQueryBuilder('s');
        //dd($params);
        $qb
            ->addSelect('COALESCE(c.title, p.title) as HIDDEN title')
            ->leftJoin('s.combo', 'c')
            ->leftJoin('s.package', 'p')
            ->leftJoin('p.createdBy', 'user')
            ->leftJoin('user.owner', 'business')
            ->leftJoin('s.categories', 'categories')
            ->leftJoin('s.prices', 'prices')
            ->leftJoin('p.industryType', 'industryType')
            ->leftJoin('s.tags', 'tags')
            ->where(
                $qb->expr()->orX(
                    'p.status = :status',
                    'c.status = :status'
                )
            )
            ->andWhere('s.isForSale = :forSaleStatus')
            ->orderBy('title', 'ASC')
        //    ->orderBy('p.createdAt', 'DESC')
            ->setParameters([
                'status' => 2,
                'forSaleStatus' => true,
            ])
        ;
         
        //sorting on the basis of created at date
        if (isset($params['order']) && in_array($params['order'][0]['column'], [6])) {
            $qb->orderBy('p.createdAt', $params['order'][0]['dir']);
        }
        
        //sorting on the basis of package name
         if (isset($params['order']) && in_array($params['order'][0]['column'], [2])) {
            $qb->orderBy('p.title', $params['order'][0]['dir']);
        }
        
        //sorting on the basis of category
         if (isset($params['order']) && in_array($params['order'][0]['column'], [4])) {
            $qb->orderBy('categories.title', $params['order'][0]['dir']);
        }
        
        //sorting on the basis of rebate %
         if (isset($params['order']) && in_array($params['order'][0]['column'], [5])) {
            $qb->orderBy('prices.rebate', $params['order'][0]['dir']);
        }
        
        //sorting on the basis of industry
        if (isset($params['order']) && in_array($params['order'][0]['column'], [3])) {
            $qb->orderBy('industryType.name', $params['order'][0]['dir']);
        }
        
        if (isset($user) && $user !== null) {
            $qb
                ->leftJoin('s.disableForBusinesses', 'b')
                ->leftJoin('b.owner', 'u')
                ->leftJoin('u.businesses', 'b1')
            ;
        }
        
        //sorting on the basis of business name
        if (isset($params['order']) && in_array($params['order'][0]['column'], [1])) {
            $qb->orderBy('business.name', $params['order'][0]['dir']);
        }
        
        //sorting on the basis of tags
        if (isset($params['order']) && in_array($params['order'][0]['column'], [7])) {
            $qb->orderBy('tags.name', $params['order'][0]['dir']);
        }
        
        //searching
        if (!empty($params['search']['value'])) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like(
                        'p.title',
                        ':searchValue'
                    ),
                    
                    $qb->expr()->like(
                        'categories.title',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'prices.rebate',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'industryType.name',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'b1.name',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'tags.name',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'p.createdAt',
                        ':searchValue'
                    )
                )
            )
            ->setParameter('searchValue', '%' . $params['search']['value'] . '%');
        }
        
        if($user->getRole()->getId()!=1)
            $qb = $this->addRestrictions($qb, 'view', ['user' => $user, 'business' => $business]);
        
        $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);
        
        $qb->setFirstResult($params['start'])
            ->setMaxResults($params['length']);
        return $qb->getQuery()->getResult();
    }
    
    public function getLength(Business $business, User $user,$params)
    {
        $qb = $this->createQueryBuilder('s');
        
        $qb
            ->addSelect('COALESCE(c.title, p.title) as HIDDEN title')
            ->leftJoin('s.combo', 'c')
            ->leftJoin('s.package', 'p')
            ->leftJoin('s.categories', 'categories')
            ->leftJoin('s.prices', 'prices')
            ->leftJoin('p.industryType', 'industryType')
            ->leftJoin('s.tags', 'tags')
            ->where(
                $qb->expr()->orX(
                    'p.status = :status',
                    'c.status = :status'
                )
            )
            ->andWhere('s.isForSale = :forSaleStatus')
            ->orderBy('title', 'ASC')
        //    ->orderBy('p.createdAt', 'DESC')
            ->setParameters([
                'status' => 2,
                'forSaleStatus' => true,
            ])
        ;
         
        //sorting on the basis of created at date
        if (isset($params['order']) && in_array($params['order'][0]['column'], [6])) {
            $qb->orderBy('p.createdAt', $params['order'][0]['dir']);
        }
        //sorting on the basis of package name
        if (isset($params['order']) && in_array($params['order'][0]['column'], [2])) {
            $qb->orderBy('p.title', $params['order'][0]['dir']);
        }
        
         //sorting on the basis of category
        if (isset($params['order']) && in_array($params['order'][0]['column'], [4])) {
            $qb->orderBy('categories.title', $params['order'][0]['dir']);
        }
        
         //sorting on the basis of rebate %
        if (isset($params['order']) && in_array($params['order'][0]['column'], [5])) {
            $qb->orderBy('prices.rebate', $params['order'][0]['dir']);
        }
        
        //sorting on the basis of industry
        if (isset($params['order']) && in_array($params['order'][0]['column'], [3])) {
            $qb->orderBy('industryType.name', $params['order'][0]['dir']);
        }
        
        if (isset($user) && $user !== null) {
            $qb
                ->leftJoin('s.disableForBusinesses', 'b')
                ->leftJoin('b.owner', 'u')
                ->leftJoin('u.businesses', 'b1')
            ;
            
            //sorting on the basis of business name
            if (isset($params['order']) && in_array($params['order'][0]['column'], [1])) {
                $qb->orderBy('b1.name', $params['order'][0]['dir']);
            }
            
        }
        
        //sorting on the basis of tags
        if (isset($params['order']) && in_array($params['order'][0]['column'], [7])) {
            $qb->orderBy('tags.name', $params['order'][0]['dir']);
        }
        
        //searching
        if (!empty($params['search']['value'])) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like(
                        'p.title',
                        ':searchValue'
                    ),
                    
                    $qb->expr()->like(
                        'categories.title',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'prices.rebate',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'industryType.name',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'b1.name',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'tags.name',
                        ':searchValue'
                    ),
                        
                    $qb->expr()->like(
                        'p.createdAt',
                        ':searchValue'
                    )
                )
            )
            ->setParameter('searchValue', '%' . $params['search']['value'] . '%');
        }
        
        if($user->getRole()->getId()!=1)
            $qb = $this->addRestrictions($qb, 'view', ['user' => $user, 'business' => $business]);
        $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);
        
        return $qb->getQuery()->getResult();
    }

    /**
     * @param bool $forApproveOnly
     * @param array $params
     *
     * @return mixed
     * @throws \Doctrine\ORM\Query\QueryException
     */
    public function getCount($forApproveOnly=false, $params=[])
    {
        $qb = $this->createQueryBuilder('s');

        $qb->addSelect('IFNULL(c.createdAt, p.createdAt) as HIDDEN date, IFNULL(c.title, p.title) as HIDDEN title');
        
        
        if ($forApproveOnly === true) {
            $qb
                ->leftJoin('s.combo', 'c')
                ->leftJoin('s.package', 'p')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->andX(
                            'p.status = :ableStatus'
                        ),
                        $qb->expr()->andX(
                            'c.status = :ableStatus'
                        )
                    )
                )
                ->setParameter('ableStatus', Item::STATUS_PUBLISHED)
            ;
        } else {
            $qb
              //  ->select('count(s.id)')
                ->where('s.isForSale = :forSaleStatus')
                ->setParameter('forSaleStatus', true)
            ;

            if (isset($params['category']) && $params['category'] !== null) {
                $qb
                    ->join('s.categories', 'cat', 'WITH', 'cat.id = :selectedCategory')
                    ->setParameter('selectedCategory', $params['category'])
                ;
            }

            $qb
                ->leftJoin('s.combo', 'c')
                ->leftJoin('s.package', 'p')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->andX(
                            'p.status = :ableStatus'
                        ),
                        $qb->expr()->andX(
                            'c.status = :ableStatus'
                        )
                    )
                )
                ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ;
            
            
            if($params['user']->getRole()->getId()!=1)
                $qb = $this->addRestrictions($qb, 'view', $params);
            
            $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);
           
            $entities = $this->getEntityManager()->getRepository('LocalsBestShopBundle:Package')->findBy(['type' => 7 , 'assignee' => $params['user']]);
            
            foreach($entities as $entity){
                if($entity->getQuantity())
                    $result[]= $entity->getSku();
            }

            if (isset($params['business']) && $params['business'] !== null) {
                $business = $params['business'];
                $qb
                    ->andWhere(
                        $qb->expr()->notIn(
                            's.id',
                            $this->createQueryBuilder('disabledSkus')
                                ->select('disabledSkus.id')
                                ->innerJoin('disabledSkus.disableForBusinesses', 'b', 'WITH', 'b.id = :businessId')
                                ->getDQL()
                        )
                    )
                    ->setParameter('businessId', $business->getId())
                ;
            }
        }
        
        
        if (isset($params['orderBy']) && $params['orderBy'] !== null) {
            $qb->orderBy($params['orderBy'], $params['orderDir']);
        }
        
        $qb->groupBy('s.id');
        
        if (!empty($params['search'])) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like(
                        'p.title',
                        ':searchValue'
                    )
                )
            )
            ->setParameter('searchValue', '%' . $params['search'] . '%');
        }
         
        if(!empty($result) && !isset($params['category']) ){
            //return count($result)+$qb->getQuery()->getSingleScalarResult();
            return count($result) +count($qb->getQuery()->getResult());
        }
        else{
            return count($qb->getQuery()->getResult());
            //return $qb->getQuery()->getSingleScalarResult();
        }
        
    }

    /**
     * @param $id
     *
     * @return mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOne($id)
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->where('s.id = :id')
            ->andWhere('s.isForSale = :forSaleStatus')
            ->setParameter('id', $id)
            ->setParameter('forSaleStatus', true)
            ->groupBy('s')
        ;

        try {
            return $qb->getQuery()->getSingleResult();
        }
        catch(NoResultException $e) {
            return null;
        }
    }

    public function getForForm($user, $skuId)
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->leftJoin('s.combo', 'c')
            ->leftJoin('s.package', 'p')
            ->where(
                $qb->expr()->orX(
                    $qb->expr()->andX(
                        'p.createdBy = :user',
                        'p.status = :ableStatus'
                    ),
                    $qb->expr()->andX(
                        'c.createdBy = :user',
                        'c.status = :ableStatus'
                    )
                )
            )
        ;
        if ($skuId === null) {
            $qb->andWhere('s.id IS NOT NULL ');
        } else {
            $qb
                ->andWhere('s.id <> :skuId')
                ->setParameter('skuId', $skuId)
            ;
        }

        $qb->setParameter('user', $user)
            ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ->orderBy('s.id', 'ASC')
        ;

        return $qb;
    }

    public function getAllApprovedForForm()
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->leftJoin('s.combo', 'c')
            ->leftJoin('s.package', 'p')
            ->where(
                $qb->expr()->orX(
                'p.status = :ableStatus',
                    'c.status = :ableStatus'
                )
            )
            ->andWhere('s.isForSale = :forSaleStatus')
            ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ->setParameter('forSaleStatus', true)
            ->orderBy('s.id', 'ASC')
        ;

        return $qb;
    }


    public function getRelated(Sku $sku, $limit = 3, User $user, Business $business)
    {
        $qb = $this->createQueryBuilder('s');

        $categories = [];

        foreach ($sku->getCategories() as $item) {
            $categories[] = $item->getId();
        }

        $qb
            ->addSelect('RAND() as HIDDEN rand')
            ->leftJoin('s.combo', 'c')
            ->leftJoin('s.package', 'p')
            ->leftJoin('s.categories', 'cat')
            ->groupBy('s')
            ->andWhere('s.id <> :id')
            ->andWhere(
                $qb->expr()->in(
                    'cat.id',
                    $categories
                )
            )
            ->andWhere('s.isForSale = :shopStatus')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->andX(
                        'p.status = :ableStatus'
                    ),
                    $qb->expr()->andX(
                        'c.status = :ableStatus'
                    )
                )
            )
            ->setParameter('shopStatus', true)
            ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ->orderBy('rand')
            ->setMaxResults($limit)
            ->setParameter('id', $sku->getId())
        ;
        $qb = $this->addRestrictions($qb, 'view', ['user' => $user, 'business' => $business]);
        
        $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);

        return $qb->getQuery()->getResult();
    }

    public function getPopular($limit = 5, $business = null,$params=[])
    {
        $qb = $this->createQueryBuilder('s');

        $qb
            ->leftJoin('s.combo', 'c')
            ->leftJoin('s.package', 'p')
            ->where('s.isForSale = :shopStatus')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->andX(
                        'p.status = :ableStatus'
                    ),
                    $qb->expr()->andX(
                        'c.status = :ableStatus'
                    )
                )
            )
            ->setParameter('shopStatus', true)
            ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ->orderBy('s.views', 'DESC')
         //   ->setMaxResults($limit)
        ;
        if($params['user']->getRole()->getId()!=1)
         $qb = $this->addRestrictions($qb, 'view', $params);
        
        $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);
         
        if (isset($business) && $business !== null) {
            $qb
                ->leftJoin('s.disableForBusinesses', 'b')
                ->andWhere('b.id IS NULL')
            ;
        }
        
        if (isset($params['limit'])) {
            $qb
                ->setMaxResults($params['limit'])
            ;
        }
        return $qb->getQuery()->getResult();
    }

    public function getRecentViewed($ids, $limit = 5, $business=null, $user=null)
    {
        
        $qb = $this->createQueryBuilder('s');

        $qb
            ->leftJoin('s.combo', 'c')
            ->leftJoin('s.package', 'p')
            ->where('s.isForSale = :shopStatus')
            ->andWhere('s.id in (:ids)')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->andX(
                        'p.status = :ableStatus'
                    ),
                    $qb->expr()->andX(
                        'c.status = :ableStatus'
                    )
                )
            )
            ->setParameter('ids', $ids)
            ->setParameter('shopStatus', true)
            ->setParameter('ableStatus', Item::STATUS_APPROVED)
            ->orderBy('s.views', 'DESC')
            ->setMaxResults($limit)
        ;
        
        if($user->getRole()->getId()!=1)
            $qb = $this->addRestrictions($qb, 'view', ['user' => $user, 'business' => $business]);
        
        $qb
                ->andWhere(
                    $qb->expr()->andX(
                        $qb->expr()->orX(
                            $qb->expr()->neq('p.quantity',':notenough')
                        )
                    )
                )
                ->setParameter('notenough',0);

        if (isset($business) && $business !== null) {
            $qb
                ->leftJoin('s.disableForBusinesses', 'b')
                ->andWhere('b.id IS NULL')
            ;
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function getByRecentReviews($limit = 5)
    {
        $query = $this->getEntityManager()->createQuery(
            'SELECT c, i, img
             FROM LocalsBestShopBundle:Comment as c
             JOIN c.item as i
            
             LEFT JOIN i.images as img
             ORDER BY c.createdAt DESC'
        )->setMaxResults($limit);

        return $query->getResult();
    }
}
